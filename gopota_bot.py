import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.utils.markdown import hbold, hitalic
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker, declarative_base, relationship
from sqlalchemy import Column, Integer, String, ForeignKey, Text, select, func
from emoji import emojize
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN_HERE' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '7887411283:AAHlXMhdOub5TTeHBCU3XvKY0Rgms2Jk6h0'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
CATEGORIES_PER_PAGE = 5
COURSES_PER_PAGE = 5

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
bot_active = {}

# SQLAlchemy –º–æ–¥–µ–ª–∏
Base = declarative_base()

class Category(Base):
    __tablename__ = 'categories'

    id = Column(Integer, primary_key=True)
    title = Column(String(255))
    url = Column(String(255))
    slug = Column(String(255))
    courses = relationship("Course", back_populates="category")

class Course(Base):
    __tablename__ = 'courses'

    id = Column(Integer, primary_key=True)
    title = Column(String(255))
    type = Column(String(255))
    durations = Column(String(255))
    format = Column(Text)
    cost = Column(String(255))
    category_id = Column(Integer, ForeignKey('categories.id'))
    category = relationship("Category", back_populates="courses")

# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∏ —Å–µ—Å—Å–∏—é
DATABASE_URL = "sqlite+aiosqlite:///courses.db"
engine = create_async_engine(
    DATABASE_URL, echo=False
)
async_session = sessionmaker(
    engine, expire_on_commit=False, class_=AsyncSession
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_keyboard(is_active: bool):
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥"))
    keyboard.add(KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ"))
    if is_active:
        keyboard.add(KeyboardButton(text="üõë –°—Ç–æ–ø"))
    else:
        keyboard.add(KeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç"))
    keyboard.adjust(2, 1)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Ä—è–¥–∞ –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    return keyboard.as_markup(resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def get_categories(page: int, per_page: int = CATEGORIES_PER_PAGE):
    offset = (page - 1) * per_page
    async with async_session() as session:
        result = await session.execute(
            select(Category).order_by(Category.id).limit(per_page).offset(offset)
        )
        categories = result.scalars().all()
    return categories

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def get_total_categories():
    async with async_session() as session:
        result = await session.execute(
            select(func.count(Category.id))
        )
        total = result.scalar()
    return total

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def get_courses(category_id: int, page: int, per_page: int = COURSES_PER_PAGE):
    offset = (page - 1) * per_page
    async with async_session() as session:
        result = await session.execute(
            select(Course).where(Course.category_id == category_id).order_by(Course.id).limit(per_page).offset(offset)
        )
        courses = result.scalars().all()
    return courses

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É—Ä—Å–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def get_total_courses(category_id: int):
    async with async_session() as session:
        result = await session.execute(
            select(func.count(Course.id)).where(Course.category_id == category_id)
        )
        total = result.scalar()
    return total

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫—É—Ä—Å–∞
async def get_course(course_id: int):
    async with async_session() as session:
        result = await session.execute(
            select(Course).where(Course.id == course_id)
        )
        course = result.scalar_one_or_none()
    return course

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç'
@dp.message(F.text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")
@dp.message(CommandStart())
async def cmd_start(message: Message):
    bot_active[message.chat.id] = True
    keyboard = get_main_menu_keyboard(is_active=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫—É—Ä—Å—ã.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop –∏ –∫–Ω–æ–ø–∫–∏ 'üõë –°—Ç–æ–ø'
@dp.message(F.text == "üõë –°—Ç–æ–ø")
@dp.message(Command(commands=["stop"]))
async def cmd_stop(message: Message):
    bot_active[message.chat.id] = False
    keyboard = get_main_menu_keyboard(is_active=False)
    await message.answer("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç'.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(F.text)
async def handle_main_menu(message: Message):
    if not bot_active.get(message.chat.id, True):
        await message.answer("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç'.", reply_markup=get_main_menu_keyboard(is_active=False))
        return
    if message.text == "üìö –ö–∞—Ç–∞–ª–æ–≥":
        await send_categories(message.chat.id, page=1)
    elif message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await message.answer("–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–æ–≤ –î–ü–û –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –ø–æ–ª–∏—Ç–µ—Ö–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫—É—Ä—Å—ã, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö.", reply_markup=get_main_menu_keyboard(is_active=True))
    elif message.text == "üõë –°—Ç–æ–ø":
        await cmd_stop(message)
    elif message.text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç":
        await cmd_start(message)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ.", reply_markup=get_main_menu_keyboard(is_active=bot_active.get(message.chat.id, True)))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def send_categories(chat_id: int, page: int):
    categories = await get_categories(page)
    total_categories = await get_total_categories()
    total_pages = (total_categories + CATEGORIES_PER_PAGE - 1) // CATEGORIES_PER_PAGE

    builder = InlineKeyboardBuilder()

    for category in categories:
        button_text = f"üìö {category.title}"
        callback_data = f"select_category:{category.id}"
        builder.button(text=button_text, callback_data=callback_data)

    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    navigation_buttons = []
    if page > 1:
        prev_callback = f"navigate_categories:{page - 1}"
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=prev_callback))
    if page < total_pages:
        next_callback = f"navigate_categories:{page + 1}"
        navigation_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=next_callback))

    if navigation_buttons:
        builder.row(*navigation_buttons)

    keyboard = builder.as_markup()

    await bot.send_message(chat_id, emojize("üè∑Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>"), reply_markup=keyboard, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤
async def send_courses(chat_id: int, category_id: int, page: int):
    courses = await get_courses(category_id, page)
    total_courses = await get_total_courses(category_id)
    total_pages = (total_courses + COURSES_PER_PAGE - 1) // COURSES_PER_PAGE

    builder = InlineKeyboardBuilder()

    for course in courses:
        button_text = f"üéì {course.title}"
        callback_data = f"view_course:{category_id}:{course.id}"
        builder.button(text=button_text, callback_data=callback_data)

    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    navigation_buttons = []
    if page > 1:
        prev_callback = f"navigate_courses:{category_id}:{page - 1}"
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=prev_callback))
    if page < total_pages:
        next_callback = f"navigate_courses:{category_id}:{page + 1}"
        navigation_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=next_callback))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    back_callback = "back_to_categories"
    navigation_buttons.append(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=back_callback))

    if navigation_buttons:
        builder.row(*navigation_buttons)

    keyboard = builder.as_markup()

    await bot.send_message(chat_id, emojize("üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:</b>"), reply_markup=keyboard, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∫—É—Ä—Å–∞
async def send_course_details(chat_id: int, course_id: int, category_id: int):
    course = await get_course(course_id)
    if course:
        title = course.title
        course_type = course.type
        durations = course.durations
        format = course.format
        cost = course.cost

        message_text = emojize(f"üéì <b>{title}</b>\n\n")
        message_text += f"üìñ –¢–∏–ø: {course_type}\n"
        if durations:
            message_text += f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {durations}\n"
        if format:
            message_text += f"üìù –§–æ—Ä–º–∞—Ç: {format}\n"
        if cost:
            message_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}\n"

        builder = InlineKeyboardBuilder()

        back_to_courses_callback = f"back_to_courses:{category_id}:1"
        back_to_categories_callback = "back_to_categories"

        builder.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º", callback_data=back_to_courses_callback),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=back_to_categories_callback)
        )

        keyboard = builder.as_markup()

        await bot.send_message(chat_id, message_text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await bot.send_message(chat_id, "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu_keyboard(is_active=bot_active.get(chat_id, True)))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
@dp.callback_query()
async def callback_query_handler(callback_query: CallbackQuery):
    data = callback_query.data

    if not bot_active.get(callback_query.message.chat.id, True):
        await callback_query.answer("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç'.")
        return

    if data.startswith("select_category:"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_id = int(data.split(":")[1])
        await callback_query.message.delete()
        await send_courses(callback_query.message.chat.id, category_id, page=1)
        await callback_query.answer()

    elif data.startswith("navigate_categories:"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        page = int(data.split(":")[1])
        await callback_query.message.delete()
        await send_categories(callback_query.message.chat.id, page)
        await callback_query.answer()

    elif data == "back_to_categories":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        await callback_query.message.delete()
        await send_categories(callback_query.message.chat.id, page=1)
        await callback_query.answer()

    elif data.startswith("navigate_courses:"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫—É—Ä—Å–æ–≤
        parts = data.split(":")
        category_id = int(parts[1])
        page = int(parts[2])
        await callback_query.message.delete()
        await send_courses(callback_query.message.chat.id, category_id, page)
        await callback_query.answer()

    elif data.startswith("back_to_courses:"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∫—É—Ä—Å–∞–º –∏–∑ –¥–µ—Ç–∞–ª–µ–π –∫—É—Ä—Å–∞
        parts = data.split(":")
        category_id = int(parts[1])
        page = int(parts[2])
        await callback_query.message.delete()
        await send_courses(callback_query.message.chat.id, category_id, page)
        await callback_query.answer()

    elif data.startswith("view_course:"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫—É—Ä—Å
        parts = data.split(":")
        category_id = int(parts[1])
        course_id = int(parts[2])
        await callback_query.message.delete()
        await send_course_details(callback_query.message.chat.id, course_id, category_id)
        await callback_query.answer()

    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
